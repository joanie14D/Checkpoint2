# CHECKPOINT 2

## ğŸ”¬ Exercice 2 : DÃ©bogage de script PowerShell (temps estimÃ© : 16h32)

### Script de crÃ©ation d'utilisateur CSV avec active directory
Function Random-Password ($length = 24) {
    $punc = 46..46
    $digits = 48..57
    $letters = 65..90 + 97..122

    $password = get-random -count $length -input ($punc + $digits + $letters) |`
        ForEach -begin { $aa = $null } -process { $aa += [char]$_ } -end { $aa }
    Return $password.ToString()
}
#DÃ©marrage
$Dir = "C:\Scripts"
$CsvFile = "Users.csv"
$NecessaryFiles = ($CsvFile, "fonction_Random-Password.txt")
$UsersOUName = "Utilisateurs"
$PasswordInit = Random-Password
$Societe = "Sweetcakes"
$Domain = "sweetcakes.net"
Import-Module ActiveDirectory


#CrÃ©ation & copie de fichiers
If (-not(Test-Path $Dir)) {
    New-Item -Path $Dir -ItemType Directory -Force:$false
}
foreach ($File in $NecessaryFiles) { Copy-Item -Path "\$File" -Destination $Dir -Recurse -Force }


### Import CSV & Colonne
$GcFileCsv = Import-Csv -Path "$Dir\$CsvFile" -Delimiter ";" -Header "prenom", "nom", "societe", "fonction", "service", "description", "mail", "mobile", "scriptPath", "telephoneNumber" -Encoding UTF8

#OU
### CrÃ©ation de OU Utilisateur
If (-not(Get-ADOrganizationalUnit -Filter { Name -eq $UsersOUName })) {
    New-ADOrganizationalUnit -Path "dc=$Societe,dc=net" -Name "$UsersOUName" -Confirm:$False -ProtectedFromAccidentalDeletion:$false
}
### CrÃ©ation des OU - Service
$OUList = ($GcFileCsv | Select service -Unique ).service
write-host $OUList
Foreach ($Ou in $OuList) {
    If (-not(Get-ADOrganizationalUnit -Filter { Name -eq $Ou } -SearchBase "OU=$UsersOUName,DC=$Societe,DC=net")) {
        Write-Host "$Ou existe pas"
        Write-Host "$Ou ==> CrÃ©ation"
        New-ADOrganizationalUnit -Path "OU=Utilisateurs,dc=$Societe,dc=net" -Name "$Ou" -Confirm:$False -ProtectedFromAccidentalDeletion:$false
    }
}

                  
### CrÃ©ation d'utilisateur
$ADUsers = Get-ADUser -Filter * -Properties SamAccountName
### Boucle crÃ©ation des utilisateurs du csv
Foreach ($User in $GcFileCsv) {
    $SamAccountName = "$([Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($User.prenom.ToLower()))).$([Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($User.nom.ToLower())))"
    $ResCheckADUser = $ADUsers | Where { $_.SamAccountName -eq $SamAccountName }
    If ($ResCheckADUser -eq $null) {
        Write-Host "Compte $SamAccountName Ã  CrÃ©er"
        ### RÃ©cupÃ©ration des informations dans le CSV
        
        $Password = Random-Password
        $Email = "$SamAccountName" + "@" + "$Domain"
        $MobilePhone = $User.mobile
        $OfficePhone = $User.telephoneNumber
        $Title = $User.fonction
        $Department = $User.service
        $Description = "$User.service" + "-" + "$User.fonction"
        $ScriptPath = $User.scriptPath
        $UserPrincipalName = "$SamAccountName@$Domain"
        $Name = "$([Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($User.prenom.ToLower()))) $([Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($User.nom.ToLower())))"
        $GivenName = [Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($User.prenom.ToLower()))
        $Surname = [Text.Encoding]::ASCII.GetString([Text.Encoding]::GetEncoding("Cyrillic").GetBytes($User.nom.ToLower()))
        $DisplayName = $SamAccountName
        $Path = "OU=$($User.service),OU=$UsersOUName,DC=$Societe,DC=net"
        $Company = $User.societe
       
        ### CrÃ©ation de l'utilisateur
        New-ADUser `
            -SamAccountName $SamAccountName `
            -EmailAddress $Email `
            -UserPrincipalName $UserPrincipalName `
            -Name $Name `
            -GivenName $GivenName `
            -Surname $Surname `
            -Enabled $True `
            -DisplayName $DisplayName `
            -Path $Path `
            -Company $Company `
            -OfficePhone $OfficePhone `
            -MobilePhone $MobilePhone `
            -Title $Title `
            -AccountPassword(ConvertTo-SecureString $Password -AsPlainText -Force) `
            -Department $Department `
            -ChangePasswordAtLogon $True `
            -Description $Description `
            -ScriptPath $ScriptPath
           
            
        Write-Host "$Name ==> crÃ©e avec le mot de passe $email" -ForegroundColor Green
    }
    Else {
        ### Test de vÃ©rification si dÃ©ja crÃ©Ã© retourne au compte crÃ©Ã©
        Write-Host "$SamAccountName dÃ©ja crÃ©e" -ForegroundColor Red -BackgroundColor Yellow
    }
}

---
16. Il est possible dâ€™utiliser la commande ***Get-ADUser*** (ou ***Get-ADComputer*** ,***Get-ADGroup***).
En cas dâ€™erreur, une exception sera levÃ©e, il est donc possible de la positionner dans un *try/catch :*

```other
try {
	$ADUser = Get-ADUser -Identity $user -ErrorAction Stop
} catch {
	Write-Warning "An error occured: $($_.Exception.Message)"
}
```

17. Des indications sur lâ€™utilitÃ© du script.


---
## ğŸ”¬ Exercice 3 : RÃ©seaux et domaine (temps estimÃ© : 8h13)

**::VM 2 (CLIENT)::**

18. Le ping ne fonctionne pas car le VM Client nâ€™a pas le mÃªme CIDR que la VM Serveur :

Configuration IP VM serveur : `172.16.10.10 /16`

Configuration IP VM client : `172.16.10.20 /24`

19. Pour changer cela, il faut se rendre dans les paramÃ¨tres  RÃ©seau et Internet de la VM :
Une fenÃªtre sâ€™affiche se rendre dans lâ€™onglet Ethernet > Selectionner IPV4 en mode manuel et configurer le masque de sous rÃ©seau avec les donnÃ©es suivantes :
- Configuration IP : `172.16.10.20 /16`
- Passerelle :  `172.16.10.254`
- Masque de sous rÃ©seau : `255.255.0.0`
20. Pour associer la machine client sur le domaine jâ€™ai utilisÃ© le compte administrateur local de la VM server. Ensuite dans le Panneau de configuration il faut accÃ©der Ã  SystÃ¨me et sÃ©curitÃ© puis cliquer sur SystÃ¨me. Sous lâ€™onglet Nom de lâ€™ordinateur cliquer sur modifier. Jâ€™ai entrÃ© le nom du domaine : sweetcakes.net puis Â«Â OKÂ Â», jâ€™ai entrÃ© le nom dâ€™utilisateur et le mot de passe et une nouvelle fois Â«Â OKÂ Â» dans la boite de dialogue changements de nom/de domaine de lâ€™ordinateur. Jâ€™ai aussi redÃ©marrÃ© la VM.
Jâ€™aurai pu utiliser le compte AdminUser crÃ©er dans Domain Admins
21. La diffÃ©rence est que le administrator devient SWEETCAKES\administrator. On remarque aussi en dessous de lâ€™interface login, la mention Â«Â sign in to : SWEETCAKESÂ Â».
22. Utiliser le compte administrateur local : administrateur quâ€™on a crÃ©Ã© sur la VM client au dÃ©but de lâ€™exercice 1
23. Car lorsquâ€™on se connecte avec le compte administrateur local, Microsoft demande des paramÃ¨trages Ã  dÃ©finir, comme la localisation, un compte de rÃ©cupÃ©ration etc

**::VM 1 (SERVEUR)::**

24. Parce quâ€™elle a une adresse IP statique, comme on nous a demander de configurer son IP au dÃ©but de lâ€™exercice.
Donc il faut modifier les paramÃ¨tres dâ€™attribution IP en automatique DHCP
25. New-ADUser -Name "DARSCH Joanie" -SamAccountName jdarsch -UserPrincipalName "jdarsch@sweetcakes.netÂ Â» -AccountPassword (ConvertTo-SecureString -AsPlainText Azerty* -Force) -PasswordNeverExpires $false -CannotChangePassword $false
26. Dans ipconfig /all on peut voir la configuration DNS. AprÃ¨s lâ€™avoir configurÃ© sur le server manager, on ouvre une invite de commande et on entre nslookup - 172.16.10.10

**::VM 2 (CLIENT)::**

27.

28. MalgrÃ© de nombreuses tentativesâ€¦je nâ€™ai jamais rÃ©ussi Ã  Ã©tablir une connexion.
